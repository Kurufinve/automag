"""
automag.2_coll.run_enumlib
==========================

Script which runs enumlib.

.. codeauthor:: Michele Galasso <m.galasso@yandex.com>
"""

import os

from ase.io import read
from pymatgen.core.composition import Composition

COMPOSITION = Composition('Fe12O18')
MAGNETIC_ATOM = 'Fe'

# maximum supercell size for generating distinct AFM configurations
SUPERCELL_SIZE = 1

# location of the poscar file with the input structure
atoms = read('../input/Fe2O3-alpha.vasp')

os.mkdir('enumlib')
os.chdir('enumlib')

with open('struct_enum.in', 'w') as f:
    f.write('generated by Automag\n')
    f.write('bulk\n')

    for lat_vector in atoms.get_cell():
        for component in lat_vector:
            f.write(f'{component:14.10f}        ')
        f.write('\n')

    case = 0
    for element in COMPOSITION.elements:
        if element.name == MAGNETIC_ATOM:
            case += 2
        else:
            case += 1

    f.write(f'  {case} -nary case\n')
    f.write(f'    {atoms.get_number_of_atoms()} # Number of points in the multilattice\n')

    offset = 0
    for atom in atoms:
        for component in atom.position:
            f.write(f'{component:14.10f}        ')
        if atom.symbol == MAGNETIC_ATOM:
            offset = 1
            for i, element in enumerate(COMPOSITION.elements):
                if atom.symbol == element.name:
                    f.write(f'{i}/{i + offset}\n')
        else:
            for i, element in enumerate(COMPOSITION.elements):
                if atom.symbol == element.name:
                    f.write(f'{i + offset}\n')

    f.write(f'    1 {SUPERCELL_SIZE}   # Starting and ending cell sizes for search\n')
    f.write('0.10000000E-06 # Epsilon (finite precision parameter)\n')
    f.write('full list of labelings\n')
    f.write('# Concentration restrictions\n')

    if COMPOSITION[MAGNETIC_ATOM] % 2:
        COMPOSITION *= 2

    for atomtype, amount in COMPOSITION.to_data_dict['unit_cell_composition'].items():
        if atomtype == MAGNETIC_ATOM:
            for _ in range(2):
                f.write(f'{int(amount / 2):4d}')
                f.write(f'{int(amount / 2):4d}')
                f.write(f'{int(COMPOSITION.num_atoms):4d}\n')
        else:
            f.write(f'{int(amount):4d}')
            f.write(f'{int(amount):4d}')
            f.write(f'{int(COMPOSITION.num_atoms):4d}\n')

os.system('/home/michele/softs/enumlib/src/enum.x')
os.system('/home/michele/softs/enumlib/aux_src/makeStr.py 1 10000')
