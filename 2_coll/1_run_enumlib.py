"""
automag.2_coll.1_run_enumlib
============================

Script which runs enumlib.

.. codeauthor:: Michele Galasso <m.galasso@yandex.com>
"""

from input import *

import os
import subprocess
import numpy as np

from itertools import product
from pymatgen.core.structure import Structure
from pymatgen.symmetry.analyzer import SpacegroupAnalyzer

def launch_enumlib(count, split):
    os.mkdir(f'enumlib{count}')
    os.chdir(f'enumlib{count}')

    with open('struct_enum.in', 'w') as f:
        f.write('generated by Automag\n')
        f.write('bulk\n')

        for lat_vector in symmetrized_structure.lattice.matrix:
            for component in lat_vector:
                f.write(f'{component:14.10f}        ')
            f.write('\n')

        case = len(split) + sum(split)
        f.write(f'  {case} -nary case\n')
        f.write(f'    {symmetrized_structure.num_sites} # Number of points in the multilattice\n')

        offset = 0
        for i, (s, wyckoff) in enumerate(zip(split, symmetrized_structure.equivalent_sites)):
            if s:
                offset += 1

            for atom in wyckoff:
                for component in atom.coords:
                    f.write(f'{component:14.10f}        ')
                if s:
                    f.write(f'{i + offset - 1}/{i + offset}\n')
                else:
                    f.write(f'{i + offset}\n')

        f.write(f'    1 {supercell_size}   # Starting and ending cell sizes for search\n')
        f.write('0.10000000E-06 # Epsilon (finite precision parameter)\n')
        f.write('full list of labelings\n')
        f.write('# Concentration restrictions\n')

        for s, wyckoff in zip(split, symmetrized_structure.equivalent_sites):
            if s:
                for _ in range(2):
                    f.write(f'{len(wyckoff):4d}')
                    f.write(f'{len(wyckoff):4d}')
                    f.write(f'{symmetrized_structure.num_sites * 2:4d}\n')
            else:
                f.write(f'{len(wyckoff) * 2:4d}')
                f.write(f'{len(wyckoff) * 2:4d}')
                f.write(f'{symmetrized_structure.num_sites * 2:4d}\n')

    process = subprocess.Popen('/home/michele/softs/enumlib/src/enum.x')
    try:
        process.wait(timeout=60)
    except subprocess.TimeoutExpired:
        process.kill()

    os.system('/home/michele/softs/enumlib/aux_src/makeStr.py 1 500')
    os.chdir('..')


# full path to poscar file
path_to_poscar = '../geometries/' + poscar_file

# create Structure and SymmetrizedStructure objects
structure = Structure.from_file(path_to_poscar)
analyzer = SpacegroupAnalyzer(structure)
symmetrized_structure = analyzer.get_symmetrized_structure()

# find out which atoms are magnetic
for element in structure.composition.elements:
    if 'magnetic_atoms' not in globals():
        element.is_magnetic = element.is_transition_metal
    else:
        if element.name in magnetic_atoms:
            element.is_magnetic = True
        else:
            element.is_magnetic = False

if os.path.exists('trials'):
    print('Cannot create a folder named trials: an object with the same name already exists.')
    exit()

os.mkdir('trials')
os.chdir('trials')

# geometrical settings
settings = [structure]

# there will be a list of configurations for each setting
configurations = [[]]

# get the multiplicities of each Wyckoff position
multiplicities = [len(item) for item in symmetrized_structure.equivalent_indices]

wyckoff_magmoms = []
for i, wyckoff in enumerate(symmetrized_structure.equivalent_sites):
    if wyckoff[0].specie.is_magnetic:
        wyckoff_magmoms.append([spin_value, 0, -spin_value])
    else:
        wyckoff_magmoms.append([0])

# get all possible configurations without any splitting
for conf in product(*wyckoff_magmoms):
    configuration = np.repeat(conf, multiplicities)
    if [-item for item in configuration] not in configurations[0]:
        configurations[0].append(configuration.tolist())

# split all possible combinations of Wyckoff positions
splits = []
possibilities = [[0, 1] if len(item) > 1 else [0] for item in wyckoff_magmoms]
for split in product(*possibilities):
    if sum(split) != 0:
        splits.append(split)

for i, split in enumerate(splits):
    launch_enumlib(i + 1, split)
